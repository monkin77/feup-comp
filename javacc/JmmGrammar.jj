PARSER_PACKAGE=pt.up.fe.comp;
PARSER_CLASS=JmmGrammarParser;
SMART_NODE_CREATION=false;
TOKENS_ARE_NODES=false; // tokens are no longer nodes in the tree

// Read for clarification https://javacc.github.io/javacc/documentation/grammar.html
SKIP : " " | "\t" | "\r" | "\n" |
    <LINE_COMMENT: "//" ( ~["\r", "\n"] )* ( "\r" | "\n" ) > // |
    // Regex tutorial https://javacc.github.io/javacc/tutorials/token-manager.html
    // "/*": MULTI_LINE_COMMENT
;

// <MULTI_LINE_COMMENT> SKIP :
//     "*/": DEFAULT | // TODO This is going to the start of the program, why??
//     <~[]> // Any character
// ;

TOKEN :
    // Keywords
    < IMPORT : "import" > |
    < CLASS : "class" > |
    < EXTENDS : "extends" > |
    < PUBLIC : "public" > |
    < RETURN: "return" > |
    < STATIC: "static" > |
    < MAIN: "main" > |
    < IF: "if" > |
    < ELSE: "else" > |
    < WHILE: "while" > |
    < TRUE: "true" > |
    < FALSE: "false" > |
    < THIS: "this" > |
    < NEW: "new" > |

    // Types
    < VOID: "void" > |
    < STRING: "String" > |
    < INT: "int" > |
    < BOOL: "boolean" > |

    // Attributes
    < LENGTH: "length" > |

    // Operators
	< PLUS : "+" > |
	< MINUS : "-" > |
	< TIMES : "*" > |
	< DIVIDE : "/" > |
	< EQUALS : "=" > |
	< AND : "&&" > |
	< LESS: "<" > |
	< NOT: "!" > |

    // Parenthesis and alike
    < OPEN_PAREN : "(" > |
	< CLOSE_PAREN : ")" > |
	< OPEN_CURLY : "{" > |
	< CLOSE_CURLY : "}" > |
	< OPEN_SQUARE : "[" > |
	< CLOSE_SQUARE : "]" > |

    // Separators
	< SEMICOLON : ";" > |
	< DOT: "." > |
	< COMMA: "," > |

    // Clarification https://stackoverflow.com/questions/35578567/java-regex-for-identifiers-letters-digits-and-underscores
	< IDENTIFIER:
	    ( ( <LETTER> | <DOLLAR> ) ( <LETTER> | <DIGIT> | <UNDERSCORE> | <DOLLAR> )* ) |
	    ( <UNDERSCORE> ( <LETTER> | <DIGIT> | <UNDERSCORE> | <DOLLAR> )+ ) // Can't have identifier with single underscore
	> |

    // Symbols
    < INTEGER_LITERAL : ( <DIGIT> )+ > |
    < DIGIT: ["0"-"9"] > |
    < LETTER: ["a"-"z","A"-"Z"] > |
    < UNDERSCORE: "_" > |
    < DOLLAR: "$" >
;

Start : Program;

Program #void :
    ImportDeclaration ClassDeclaration <EOF>
;

ImportDeclaration #ImportDecl :
    ( <IMPORT>
        ( <IDENTIFIER> { jjtThis.put("id", lastConsumedToken.getImage()); } ) #Identifier(true) // Conflict with parenthesis
        ( <DOT> ( <IDENTIFIER> { jjtThis.put("id", lastConsumedToken.getImage()); } ) #Identifier )*
    <SEMICOLON> )*
;

ClassDeclaration #ClassDecl :
    <CLASS> <IDENTIFIER> { jjtThis.put("name", lastConsumedToken.getImage()); }
    [ <EXTENDS> <IDENTIFIER> { jjtThis.put("extends", lastConsumedToken.getImage()); } ] <OPEN_CURLY>
        ( VarDeclaration )*
        ( MethodDeclaration )*
    <CLOSE_CURLY>
;

VarDeclarations #void :
    ( SCAN 2 ( VarDeclaration ) )*
;

VarDeclaration #VarDecl :
    Type <IDENTIFIER> { jjtThis.put("name", lastConsumedToken.getImage()); } <SEMICOLON>
;

MethodDeclaration #void :
    <PUBLIC> ( PublicMethodDeclaration | MainDeclaration )
;

PublicMethodDeclaration #PublicMethod :
    Type <IDENTIFIER> { jjtThis.put("name", lastConsumedToken.getImage()); } <OPEN_PAREN>

        // Arguments
        [ ( Type <IDENTIFIER> { jjtThis.put("arg", lastConsumedToken.getImage()); } )
            #Argument(true) // Conflict with parenthesis
        ( <COMMA> ( Type <IDENTIFIER> { jjtThis.put("arg", lastConsumedToken.getImage()); } )
            #Argument
        )* ]

    <CLOSE_PAREN> <OPEN_CURLY>
        VarDeclarations
        ( Statement )*
        <RETURN> Expression <SEMICOLON>
    <CLOSE_CURLY>
;

MainDeclaration #Main :
    <STATIC> <VOID> <MAIN> <OPEN_PAREN>
        <STRING> <OPEN_SQUARE> <CLOSE_SQUARE>
        <IDENTIFIER> { jjtThis.put("mainArgs", lastConsumedToken.getImage()); }
    <CLOSE_PAREN> <OPEN_CURLY>
        VarDeclarations
        ( Statement )*
    <CLOSE_CURLY>
;

Type #void :
    SCAN 2 ( <INT> <OPEN_SQUARE> <CLOSE_SQUARE> #IntArray ) |
    <INT> #Int |
    <BOOL> #Bool |
    ( <IDENTIFIER> { jjtThis.put("name", lastConsumedToken.getImage()); } ) #CustomType
;

Statement #void :
    ( <OPEN_CURLY> ( Statement )* <CLOSE_CURLY> ) |
    IfElseStatement |
    WhileStatement |
    ( Expression [ <EQUALS> Expression #AssignmentExpr(2) ] <SEMICOLON> )
;

IfElseStatement #IfElse :
    <IF> <OPEN_PAREN> Expression <CLOSE_PAREN>
        Statement #IfBlock
    <ELSE> Statement #ElseBlock
;

WhileStatement #While :
    <WHILE> <OPEN_PAREN> Expression <CLOSE_PAREN>
        Statement #WhileBlock
;

Expression #void :
    AndExpression
;

AndExpression #void :
    LessExpression (<AND> LessExpression #AndExpr(2) )*
;

LessExpression #void :
    ArithmeticExpression (<LESS> ArithmeticExpression #LessExpr(2) )*
;

ArithmeticExpression #void :
    MultiplicativeExpression (
        <PLUS> MultiplicativeExpression #AddExpr(2) |
        <MINUS> MultiplicativeExpression #SubExpr(2)
    )*
;

MultiplicativeExpression #void :
    NotExpression (
        <TIMES> NotExpression #MultExpr(2) |
        <DIVIDE> NotExpression #DivExpr(2)
    )*
;

NotExpression #void :
    ( <NOT> NotExpression #NotExpr(1) ) | DotArrayExpression
;

DotArrayExpression #void :
    ExpressionTerminal ( DotExpression | ArrayExpression )*
;

DotExpression #DotExpr(2) :
    <DOT> ( <LENGTH> | DotMethod )
;

DotMethod #void :
    ( <IDENTIFIER> { jjtThis.put("id", lastConsumedToken.getImage()); } ) #Identifier
    <OPEN_PAREN> [ Expression ( <COMMA> Expression )* ] <CLOSE_PAREN>
;

ArrayExpression #ArrayExpr(2) :
    <OPEN_SQUARE> Expression <CLOSE_SQUARE>
;

NewExpression #void:
    <NEW> (
        NewArrayExpression |
        NewObjectExpression
    )
;

NewArrayExpression #NewArrayExpr :
    <INT> <OPEN_SQUARE> Expression <CLOSE_SQUARE>
;

NewObjectExpression #NewObjExpr :
    ( <IDENTIFIER> { jjtThis.put("object", lastConsumedToken.getImage()); } )
    <OPEN_PAREN> <CLOSE_PAREN>
;

ParenExpression #void :
    ( <OPEN_PAREN> Expression <CLOSE_PAREN> )
;

ExpressionTerminal #void :
    ( <INTEGER_LITERAL> { jjtThis.put("value", lastConsumedToken.getImage()); } ) #IntegerLiteral |
    ( <IDENTIFIER> { jjtThis.put("id", lastConsumedToken.getImage()); } ) #Identifier |
    <TRUE> #True |
    <FALSE> #False |
    <THIS> #This |
    ParenExpression |
    NewExpression
;

// Injections for the implementation of JmmNode
// Since this is injected into BaseNode, it affects only non-terminals
INJECT BaseNode :
		import pt.up.fe.comp.jmm.ast.JmmNode;
		import pt.up.fe.comp.jmm.ast.AJmmNode;
		import pt.up.fe.specs.util.SpecsCollections;
		extends AJmmNode
{
    @Override
    public List<JmmNode> getChildren() {

        return SpecsCollections.cast(children(), JmmNode.class);
    }

    @Override
    public void add(JmmNode child, int index) {

        if (child instanceof Node) {

            addChild(index, (Node) child);
        } else {

            throw new RuntimeException("Node " + child + " is not a Node.");
        }

    }
}
